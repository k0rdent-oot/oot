name: Validate Nutanix CAPX

on:
  pull_request:
    paths:
      - 'charts/nutanix-capx/**'
      - 'NUTANIX.md'
  push:
    branches:
      - main
    paths:
      - 'charts/nutanix-capx/**'
      - 'NUTANIX.md'

jobs:
  validate-nutanix-capx:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Helm
        uses: azure/setup-helm@v4
        with:
          version: 'latest'

      - name: Set up kubeconform
        run: |
          KUBECONFORM_VERSION=v0.6.6
          curl -L -o kubeconform.tar.gz https://github.com/yannh/kubeconform/releases/download/${KUBECONFORM_VERSION}/kubeconform-linux-amd64.tar.gz
          tar -xzf kubeconform.tar.gz
          sudo mv kubeconform /usr/local/bin/
          kubeconform -v

      - name: Download CRDs
        run: |
          mkdir -p crds/
          
          # CAPI Core CRDs (v1.8.x for v1beta2 support)
          curl -s https://raw.githubusercontent.com/kubernetes-sigs/cluster-api/v1.8.4/config/crd/bases/cluster.x-k8s.io_clusters.yaml > crds/cluster.x-k8s.io_clusters.yaml
          curl -s https://raw.githubusercontent.com/kubernetes-sigs/cluster-api/v1.8.4/config/crd/bases/cluster.x-k8s.io_clusterclasses.yaml > crds/cluster.x-k8s.io_clusterclasses.yaml
          curl -s https://raw.githubusercontent.com/kubernetes-sigs/cluster-api/v1.8.4/config/crd/bases/cluster.x-k8s.io_machinedeployments.yaml > crds/cluster.x-k8s.io_machinedeployments.yaml
          curl -s https://raw.githubusercontent.com/kubernetes-sigs/cluster-api/v1.8.4/config/crd/bases/cluster.x-k8s.io_machines.yaml > crds/cluster.x-k8s.io_machines.yaml
          
          # CAPX CRDs (approximate - using latest available)
          curl -s https://raw.githubusercontent.com/nutanix-cloud-native/cluster-api-provider-nutanix/v1.7.0/config/crd/bases/infrastructure.cluster.x-k8s.io_nutanixclusters.yaml > crds/infrastructure.cluster.x-k8s.io_nutanixclusters.yaml
          curl -s https://raw.githubusercontent.com/nutanix-cloud-native/cluster-api-provider-nutanix/v1.7.0/config/crd/bases/infrastructure.cluster.x-k8s.io_nutanixmachinetemplates.yaml > crds/infrastructure.cluster.x-k8s.io_nutanixmachinetemplates.yaml
          curl -s https://raw.githubusercontent.com/nutanix-cloud-native/cluster-api-provider-nutanix/v1.7.0/config/crd/bases/infrastructure.cluster.x-k8s.io_nutanixmachines.yaml > crds/infrastructure.cluster.x-k8s.io_nutanixmachines.yaml
          
          # k0s/k0smotron CRDs
          curl -s https://raw.githubusercontent.com/k0sproject/k0smotron/v1.0.6/config/crd/bases/controlplane.cluster.x-k8s.io_k0smotroncontrolplanes.yaml > crds/controlplane.cluster.x-k8s.io_k0smotroncontrolplanes.yaml
          curl -s https://raw.githubusercontent.com/k0sproject/k0smotron/v1.0.6/config/crd/bases/controlplane.cluster.x-k8s.io_k0scontrolplanes.yaml > crds/controlplane.cluster.x-k8s.io_k0scontrolplanes.yaml
          curl -s https://raw.githubusercontent.com/k0sproject/k0smotron/v1.0.6/config/crd/bases/bootstrap.cluster.x-k8s.io_k0sworkerconfigtemplates.yaml > crds/bootstrap.cluster.x-k8s.io_k0sworkerconfigtemplates.yaml
          
          # k0rdent CRDs
          curl -s https://raw.githubusercontent.com/Mirantis/k0rdent/v1.2.0/api/v1beta1/providertemplate.yaml > crds/k0rdent.mirantis.com_providertemplates.yaml
          curl -s https://raw.githubusercontent.com/Mirantis/k0rdent/v1.2.0/api/v1beta1/providerinterface.yaml > crds/k0rdent.mirantis.com_providerinterfaces.yaml
          
          # If downloads fail, create minimal placeholder CRDs
          for file in crds/*.yaml; do
            if [ ! -s "$file" ]; then
              echo "Warning: $file is empty or failed to download"
            fi
          done

      - name: Lint Helm chart
        run: |
          echo "Linting Nutanix CAPX chart..."
          helm lint charts/nutanix-capx

      - name: Validate chart templates - HCP mode
        run: |
          echo "Templating HCP mode..."
          helm template nutanix-capx charts/nutanix-capx \
            --set nutanix.prismCentral.address="10.1.1.100" \
            --set nutanix.controlPlaneEndpoint.host="10.1.1.200" \
            --set machineDefaults.image.name="ubuntu-22.04-k0s" \
            --set machineDefaults.cluster.name="PE-Cluster-01" \
            --set machineDefaults.subnets[0].name="VM-Network" \
            --set modes.standalone.enabled=false \
            --namespace kcm-system > hcp-output.yaml
          
          # Validate against CRDs
          kubeconform -schema-location crds/ -schema-location default -summary hcp-output.yaml

      - name: Validate chart templates - Standalone mode
        run: |
          echo "Templating Standalone mode..."
          helm template nutanix-capx charts/nutanix-capx \
            --set nutanix.prismCentral.address="10.1.1.100" \
            --set nutanix.controlPlaneEndpoint.host="10.1.1.201" \
            --set machineDefaults.image.name="ubuntu-22.04-k0s" \
            --set machineDefaults.cluster.name="PE-Cluster-01" \
            --set machineDefaults.subnets[0].name="VM-Network" \
            --set modes.hcp.enabled=false \
            --namespace kcm-system > standalone-output.yaml
          
          # Validate against CRDs
          kubeconform -schema-location crds/ -schema-location default -summary standalone-output.yaml

      - name: Validate chart templates - Both modes enabled
        run: |
          echo "Templating both modes..."
          helm template nutanix-capx charts/nutanix-capx \
            --set nutanix.prismCentral.address="10.1.1.100" \
            --set nutanix.controlPlaneEndpoint.host="10.1.1.202" \
            --set machineDefaults.image.name="ubuntu-22.04-k0s" \
            --set machineDefaults.cluster.name="PE-Cluster-01" \
            --set machineDefaults.subnets[0].name="VM-Network" \
            --namespace kcm-system > both-modes-output.yaml
          
          # Validate against CRDs
          kubeconform -schema-location crds/ -schema-location default -summary both-modes-output.yaml

      - name: Check expected resources exist
        run: |
          echo "Checking HCP mode resources..."
          grep -q "apiVersion: cluster.x-k8s.io/v1beta2" hcp-output.yaml
          grep -q "kind: ClusterClass" hcp-output.yaml && grep -q "nutanix-k0s-hcp" hcp-output.yaml
          grep -q "kind: K0smotronControlPlaneTemplate" hcp-output.yaml
          grep -q "kind: K0sWorkerConfigTemplate" hcp-output.yaml
          grep -q "kind: NutanixMachineTemplate" hcp-output.yaml
          grep -q "kind: NutanixCluster" hcp-output.yaml
          grep -q "kind: ProviderTemplate" hcp-output.yaml
          grep -q "kind: ProviderInterface" hcp-output.yaml
          grep -q "kind: Namespace" hcp-output.yaml
          
          echo "Checking Standalone mode resources..."
          grep -q "apiVersion: cluster.x-k8s.io/v1beta2" standalone-output.yaml
          grep -q "kind: ClusterClass" standalone-output.yaml && grep -q "nutanix-k0s-standalone" standalone-output.yaml
          grep -q "kind: K0sControlPlaneTemplate" standalone-output.yaml
          grep -q "kind: K0sWorkerConfigTemplate" standalone-output.yaml
          grep -q "kind: NutanixMachineTemplate" standalone-output.yaml
          grep -q "kind: NutanixCluster" standalone-output.yaml
          grep -q "kind: ProviderTemplate" standalone-output.yaml
          grep -q "kind: ProviderInterface" standalone-output.yaml
          grep -q "kind: Namespace" standalone-output.yaml
          
          echo "Checking both modes resources..."
          grep -q "nutanix-k0s-hcp" both-modes-output.yaml
          grep -q "nutanix-k0s-standalone" both-modes-output.yaml
          
          echo "Checking templateRef usage (not ref)..."
          grep -q "templateRef:" hcp-output.yaml
          grep -q "templateRef:" standalone-output.yaml
          
          echo "Checking HCP has no machineInfrastructure on control plane..."
          ! grep -A5 "controlPlane:" hcp-output.yaml | grep -q "machineInfrastructure"
          
          echo "Checking Standalone has machineInfrastructure on control plane..."
          grep -A10 "controlPlane:" standalone-output.yaml | grep -q "machineInfrastructure"

      - name: Test mode XOR validation (negative test)
        run: |
          echo "Testing schema validation fails when both modes enabled..."
          # This should FAIL with non-zero exit due to schema validation
          if helm template nutanix-capx charts/nutanix-capx -f charts/nutanix-capx/ci/test-values-both-modes.yaml --namespace kcm-system > /dev/null 2>&1; then
            echo "ERROR: Schema validation should have failed but didn't!"
            exit 1
          else
            echo "✅ Schema correctly rejected both modes enabled"
          fi

      - name: Test provider pack rendering
        run: |
          echo "Testing provider pack renders correctly..."
          helm template nutanix-pp charts/nutanix-pp --namespace kcm-system > provider-pack-output.yaml
          
          # Check for required objects
          grep -q "kind: ProviderTemplate" provider-pack-output.yaml
          grep -q "kind: ProviderInterface" provider-pack-output.yaml
          grep -q "kind: ClusterTemplate" provider-pack-output.yaml
          
          # Check for proper naming
          grep -q "cluster-api-provider-nutanix" provider-pack-output.yaml
          grep -q "nutanix-k0s-hcp" provider-pack-output.yaml
          grep -q "nutanix-k0s-standalone" provider-pack-output.yaml
          
          echo "✅ Provider pack renders correctly"

      - name: Validate cluster examples
        run: |
          echo "Validating HCP cluster example..."
          helm template hcp-example charts/nutanix-capx/templates.clusterexamples/hcp \
            --set nutanix.prismCentral.address="10.1.1.100" \
            --set nutanix.controlPlaneEndpoint.host="10.1.1.200" \
            --set machineDefaults.image.name="ubuntu-22.04-k0s" \
            --set machineDefaults.cluster.name="PE-Cluster-01" \
            --set machineDefaults.subnets[0].name="VM-Network" \
            --set cluster.name="test-hcp" \
            --namespace kcm-system > hcp-cluster-example.yaml || true
          
          echo "Validating Standalone cluster example..."  
          helm template standalone-example charts/nutanix-capx/templates.clusterexamples/standalone \
            --set nutanix.prismCentral.address="10.1.1.100" \
            --set nutanix.controlPlaneEndpoint.host="10.1.1.201" \
            --set machineDefaults.image.name="ubuntu-22.04-k0s" \
            --set machineDefaults.cluster.name="PE-Cluster-01" \
            --set machineDefaults.subnets[0].name="VM-Network" \
            --set cluster.name="test-standalone" \
            --namespace kcm-system > standalone-cluster-example.yaml || true

      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: nutanix-capx-validation-outputs
          path: |
            hcp-output.yaml
            standalone-output.yaml
            both-modes-output.yaml
            provider-pack-output.yaml
            hcp-cluster-example.yaml
            standalone-cluster-example.yaml

  yamllint:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.x'
          
      - name: Install yamllint
        run: pip install yamllint
        
      - name: Lint YAML files
        run: |
          yamllint charts/nutanix-capx/ NUTANIX.md

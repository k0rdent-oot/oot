name: Validate Nutanix Charts

on:
  pull_request:
    paths:
      - 'charts/nutanix-*/**'
      - 'NUTANIX.md'
      - 'smoke/**'
  push:
    branches:
      - main
    paths:
      - 'charts/nutanix-*/**'
      - 'NUTANIX.md'
      - 'smoke/**'

jobs:
  validate-charts:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        chart:
          - name: nutanix-capx-hcp
            type: capx
            test-values: charts/nutanix-capx-hcp/ci/test-values.yaml
          - name: nutanix-capx-standalone
            type: capx
            test-values: charts/nutanix-capx-standalone/ci/test-values.yaml
          - name: nutanix-pp-hcp
            type: provider-pack
            test-values: ""
          - name: nutanix-pp-standalone
            type: provider-pack
            test-values: ""
          - name: nutanix-capx
            type: legacy
            test-values: charts/nutanix-capx/ci/test-values-hcp.yaml
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Helm
        uses: azure/setup-helm@v4
        with:
          version: 'latest'

      - name: Set up kubeconform
        if: matrix.chart.type != 'provider-pack'
        run: |
          KUBECONFORM_VERSION=v0.6.6
          curl -L -o kubeconform.tar.gz https://github.com/yannh/kubeconform/releases/download/${KUBECONFORM_VERSION}/kubeconform-linux-amd64.tar.gz
          tar -xzf kubeconform.tar.gz
          sudo mv kubeconform /usr/local/bin/
          kubeconform -v

      - name: Download CRDs
        if: matrix.chart.type != 'provider-pack'
        run: |
          mkdir -p crds/
          
          # CAPI Core CRDs (v1.8.x for v1beta2 support)
          curl -s https://raw.githubusercontent.com/kubernetes-sigs/cluster-api/v1.8.4/config/crd/bases/cluster.x-k8s.io_clusters.yaml > crds/cluster.x-k8s.io_clusters.yaml
          curl -s https://raw.githubusercontent.com/kubernetes-sigs/cluster-api/v1.8.4/config/crd/bases/cluster.x-k8s.io_clusterclasses.yaml > crds/cluster.x-k8s.io_clusterclasses.yaml
          curl -s https://raw.githubusercontent.com/kubernetes-sigs/cluster-api/v1.8.4/config/crd/bases/cluster.x-k8s.io_machinedeployments.yaml > crds/cluster.x-k8s.io_machinedeployments.yaml
          curl -s https://raw.githubusercontent.com/kubernetes-sigs/cluster-api/v1.8.4/config/crd/bases/cluster.x-k8s.io_machines.yaml > crds/cluster.x-k8s.io_machines.yaml
          
          # CAPX CRDs
          curl -s https://raw.githubusercontent.com/nutanix-cloud-native/cluster-api-provider-nutanix/v1.7.0/config/crd/bases/infrastructure.cluster.x-k8s.io_nutanixclusters.yaml > crds/infrastructure.cluster.x-k8s.io_nutanixclusters.yaml
          curl -s https://raw.githubusercontent.com/nutanix-cloud-native/cluster-api-provider-nutanix/v1.7.0/config/crd/bases/infrastructure.cluster.x-k8s.io_nutanixmachinetemplates.yaml > crds/infrastructure.cluster.x-k8s.io_nutanixmachinetemplates.yaml
          curl -s https://raw.githubusercontent.com/nutanix-cloud-native/cluster-api-provider-nutanix/v1.7.0/config/crd/bases/infrastructure.cluster.x-k8s.io_nutanixmachines.yaml > crds/infrastructure.cluster.x-k8s.io_nutanixmachines.yaml
          
          # k0s/k0smotron CRDs
          curl -s https://raw.githubusercontent.com/k0sproject/k0smotron/v1.0.6/config/crd/bases/controlplane.cluster.x-k8s.io_k0smotroncontrolplanes.yaml > crds/controlplane.cluster.x-k8s.io_k0smotroncontrolplanes.yaml
          curl -s https://raw.githubusercontent.com/k0sproject/k0smotron/v1.0.6/config/crd/bases/controlplane.cluster.x-k8s.io_k0scontrolplanes.yaml > crds/controlplane.cluster.x-k8s.io_k0scontrolplanes.yaml
          curl -s https://raw.githubusercontent.com/k0sproject/k0smotron/v1.0.6/config/crd/bases/bootstrap.cluster.x-k8s.io_k0sworkerconfigtemplates.yaml > crds/bootstrap.cluster.x-k8s.io_k0sworkerconfigtemplates.yaml
          
          # k0rdent CRDs
          curl -s https://raw.githubusercontent.com/Mirantis/k0rdent/v1.2.0/api/v1beta1/providertemplate.yaml > crds/k0rdent.mirantis.com_providertemplates.yaml
          curl -s https://raw.githubusercontent.com/Mirantis/k0rdent/v1.2.0/api/v1beta1/providerinterface.yaml > crds/k0rdent.mirantis.com_providerinterfaces.yaml

      - name: Install helm-unittest
        if: matrix.chart.type == 'capx' || matrix.chart.type == 'legacy'
        run: helm plugin install https://github.com/helm-unittest/helm-unittest

      - name: Lint Helm chart
        run: |
          echo "Linting ${{ matrix.chart.name }} chart..."
          helm lint charts/${{ matrix.chart.name }}

      - name: Run helm unittest
        if: matrix.chart.type == 'capx' || matrix.chart.type == 'legacy'
        run: |
          echo "Running unit tests for ${{ matrix.chart.name }}..."
          helm unittest charts/${{ matrix.chart.name }}

      - name: Validate chart templates
        if: matrix.chart.type == 'capx' || matrix.chart.type == 'legacy'
        run: |
          echo "Templating ${{ matrix.chart.name }}..."
          if [ -n "${{ matrix.chart.test-values }}" ]; then
            helm template ${{ matrix.chart.name }} charts/${{ matrix.chart.name }} \
              -f ${{ matrix.chart.test-values }} \
              --namespace kcm-system > output.yaml
          else
            helm template ${{ matrix.chart.name }} charts/${{ matrix.chart.name }} \
              --namespace kcm-system > output.yaml
          fi
          
          # Validate against CRDs
          kubeconform -schema-location crds/ -schema-location default -summary output.yaml

      - name: Check HCP chart specific resources
        if: matrix.chart.name == 'nutanix-capx-hcp'
        run: |
          echo "Checking HCP-specific requirements..."
          grep -q "apiVersion: cluster.x-k8s.io/v1beta2" output.yaml
          grep -q "kind: K0smotronControlPlaneTemplate" output.yaml
          grep -q "kind: K0sWorkerConfigTemplate" output.yaml
          grep -q "kind: NutanixMachineTemplate" output.yaml
          grep -q "kind: NutanixCluster" output.yaml
          grep -q "templateRef:" output.yaml
          # HCP should NOT have control plane machineInfrastructure
          ! grep -A5 "controlPlane:" output.yaml | grep -q "machineInfrastructure"
          echo "✅ HCP chart validation passed"

      - name: Check Standalone chart specific resources
        if: matrix.chart.name == 'nutanix-capx-standalone'
        run: |
          echo "Checking Standalone-specific requirements..."
          grep -q "apiVersion: cluster.x-k8s.io/v1beta2" output.yaml
          grep -q "kind: K0sControlPlaneTemplate" output.yaml
          grep -q "kind: K0sWorkerConfigTemplate" output.yaml
          grep -q "kind: NutanixMachineTemplate" output.yaml
          grep -q "kind: NutanixCluster" output.yaml
          grep -q "templateRef:" output.yaml
          # Standalone SHOULD have control plane machineInfrastructure
          grep -A10 "controlPlane:" output.yaml | grep -q "machineInfrastructure"
          echo "✅ Standalone chart validation passed"

      - name: Check provider pack resources
        if: matrix.chart.type == 'provider-pack'
        run: |
          echo "Checking provider pack requirements..."
          helm template ${{ matrix.chart.name }} charts/${{ matrix.chart.name }} \
            --namespace kcm-system > provider-pack-output.yaml
          
          # Check for required objects
          grep -q "kind: ProviderTemplate" provider-pack-output.yaml
          grep -q "kind: ProviderInterface" provider-pack-output.yaml
          grep -q "kind: ClusterTemplate" provider-pack-output.yaml
          
          # Check for proper naming
          if [[ "${{ matrix.chart.name }}" == *"hcp"* ]]; then
            grep -q "nutanix-hcp" provider-pack-output.yaml
          else
            grep -q "nutanix-standalone" provider-pack-output.yaml
          fi
          
          echo "✅ Provider pack validation passed"

      - name: Test legacy chart XOR validation
        if: matrix.chart.name == 'nutanix-capx'
        run: |
          echo "Testing legacy chart XOR validation..."
          # This should FAIL with non-zero exit due to schema validation
          if helm template nutanix-capx charts/nutanix-capx -f charts/nutanix-capx/ci/test-values-both-modes.yaml --namespace kcm-system > /dev/null 2>&1; then
            echo "ERROR: Schema validation should have failed but didn't!"
            exit 1
          else
            echo "✅ Legacy chart correctly rejected both modes enabled"
          fi

      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: ${{ matrix.chart.name }}-validation-outputs
          path: |
            output.yaml
            provider-pack-output.yaml

  validate-nutanix-legacy:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Helm
        uses: azure/setup-helm@v4
        with:
          version: 'latest'

      - name: Set up kubeconform
        run: |
          KUBECONFORM_VERSION=v0.6.6
          curl -L -o kubeconform.tar.gz https://github.com/yannh/kubeconform/releases/download/${KUBECONFORM_VERSION}/kubeconform-linux-amd64.tar.gz
          tar -xzf kubeconform.tar.gz
          sudo mv kubeconform /usr/local/bin/

      - name: Download CRDs
        run: |
          mkdir -p crds/
          
          # Download the same CRDs as matrix job
          curl -s https://raw.githubusercontent.com/kubernetes-sigs/cluster-api/v1.8.4/config/crd/bases/cluster.x-k8s.io_clusterclasses.yaml > crds/cluster.x-k8s.io_clusterclasses.yaml
          curl -s https://raw.githubusercontent.com/nutanix-cloud-native/cluster-api-provider-nutanix/v1.7.0/config/crd/bases/infrastructure.cluster.x-k8s.io_nutanixclusters.yaml > crds/infrastructure.cluster.x-k8s.io_nutanixclusters.yaml
          curl -s https://raw.githubusercontent.com/k0sproject/k0smotron/v1.0.6/config/crd/bases/controlplane.cluster.x-k8s.io_k0smotroncontrolplanes.yaml > crds/controlplane.cluster.x-k8s.io_k0smotroncontrolplanes.yaml
          curl -s https://raw.githubusercontent.com/k0sproject/k0smotron/v1.0.6/config/crd/bases/controlplane.cluster.x-k8s.io_k0scontrolplanes.yaml > crds/controlplane.cluster.x-k8s.io_k0scontrolplanes.yaml

      - name: Test legacy chart both modes (for compatibility)
        run: |
          echo "Testing legacy chart HCP mode..."
          helm template nutanix-capx charts/nutanix-capx -f charts/nutanix-capx/ci/test-values-hcp.yaml --namespace kcm-system > legacy-hcp.yaml
          kubeconform -schema-location crds/ -schema-location default -summary legacy-hcp.yaml
          
          echo "Testing legacy chart Standalone mode..."  
          helm template nutanix-capx charts/nutanix-capx -f charts/nutanix-capx/ci/test-values-standalone.yaml --namespace kcm-system > legacy-standalone.yaml
          kubeconform -schema-location crds/ -schema-location default -summary legacy-standalone.yaml
          
          echo "✅ Legacy chart compatibility validated"

      - name: Upload legacy artifacts
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: nutanix-legacy-validation-outputs
          path: |
            legacy-hcp.yaml
            legacy-standalone.yaml

  yamllint:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.x'
          
      - name: Install yamllint
        run: pip install yamllint
        
      - name: Lint YAML files
        run: |
          yamllint charts/nutanix-*/ NUTANIX.md smoke/

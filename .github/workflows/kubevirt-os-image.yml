name: KubeVirt OS Container Disk Image

on:
  workflow_dispatch:
    inputs:
      cloud_image:
        description: "Cloud image to package"
        required: true
        type: choice
        options:
          - debian
          - ubuntu
      disk_size:
        description: "Disk size in GiB (default: 10)"
        required: false
        default: "10"
        type: string
      tag:
        description: "Image tag"
        default: latest
        required: false

jobs:
  build-disk-image:
    name: Build ${{ github.event.inputs.cloud_image }} disk image
    runs-on: ubuntu-latest

    container:
      image: debian:13
      options: --privileged

    outputs:
      name: ${{ steps.vars.outputs.name }}
      tag: ${{ steps.vars.outputs.tag }}
      filename: ${{ steps.vars.outputs.filename }}

    steps:
      - name: Install required tools
        shell: bash
        run: |
          apt-get update
          apt-get install -y \
            gzip \
            libguestfs-tools \
            libvirt-clients \
            qemu-utils \
            sudo \
            virtinst

      # https://github.blog/changelog/2024-04-02-github-actions-hardware-accelerated-android-virtualization-now-available/
      # https://libguestfs.org/guestfs-faq.1.html
      # - name: Enable KVM group perms
      #   shell: bash
      #   run: |
      #     echo 'KERNEL=="kvm", GROUP="kvm", MODE="0666", OPTIONS+="static_node=kvm"' | sudo tee /etc/udev/rules.d/99-kvm4all.rules
      #     sudo udevadm control --reload-rules
      #     sudo udevadm trigger --name-match=kvm
      #     sudo usermod -a -G kvm $USER
      #     sudo usermod -a -G libvirt $USER || true
      #     sudo chmod 0644 /boot/vmlinuz*
      #     sudo chmod -R 0777 /var/run/ /run/user/$(id -u) /tmp/

      - name: Set up variables
        id: vars
        shell: bash
        run: |
          IMAGE_NAME="kubevirt-container-disk"
          echo "IMAGE_NAME=${IMAGE_NAME}" >> $GITHUB_ENV

          if [ -z "${{ github.event.inputs.tag }}" ]; then
            IMAGE_TAG="${{ github.event.inputs.cloud_image }}-$(date +%Y%m%d)"
          else
            IMAGE_TAG="${{ github.event.inputs.cloud_image }}-${{ github.event.inputs.tag }}"
          fi
          echo "IMAGE_TAG=${IMAGE_TAG}" >> $GITHUB_ENV

          echo "name=${IMAGE_NAME}" >> $GITHUB_OUTPUT
          echo "tag=${IMAGE_TAG}" >> $GITHUB_OUTPUT

          case "${{ github.event.inputs.cloud_image }}" in
            debian)
              echo "DOWNLOAD_URL=https://cdimage.debian.org/images/cloud/trixie/latest/debian-13-generic-amd64.qcow2" >> $GITHUB_ENV
              echo "ORIGINAL_DISK_IMAGE_FILENAME=debian-13-generic-amd64.qcow2" >> $GITHUB_ENV
              ;;
            ubuntu)
              echo "DOWNLOAD_URL=https://cloud-images.ubuntu.com/minimal/releases/noble/release/ubuntu-24.04-minimal-cloudimg-amd64.img" >> $GITHUB_ENV
              echo "ORIGINAL_DISK_IMAGE_FILENAME=ubuntu-24.04-minimal-cloudimg-amd64.img" >> $GITHUB_ENV
              ;;
          esac

          echo "RESIZED_DISK_IMAGE_FILENAME=os.qcow2" >> $GITHUB_ENV
          echo "filename=os.qcow2" >> $GITHUB_OUTPUT
          echo "DISK_SIZE=${{ github.event.inputs.disk_size || '10' }}" >> $GITHUB_ENV

      - name: Download cloud image
        shell: bash
        run: |
          curl -L ${DOWNLOAD_URL} -o ${{ env.ORIGINAL_DISK_IMAGE_FILENAME }}

      - name: Resize disk image
        shell: bash
        run: |
          qemu-img create -f qcow2 -o preallocation=metadata ${{ env.RESIZED_DISK_IMAGE_FILENAME }} ${DISK_SIZE}G
          virt-resize --expand /dev/sda1 ${{ env.ORIGINAL_DISK_IMAGE_FILENAME }} ${{ env.RESIZED_DISK_IMAGE_FILENAME }}
        env:
          LIBGUESTFS_BACKEND: direct
          LIBGUESTFS_DEBUG: 1
          LIBGUESTFS_TRACE: 1
          LIBGUESTFS_DISABLE_APPLIANCE_LOCK: 1

      - name: Customize image
        shell: bash
        run: |
          virt-customize -x -v -a ${{ env.RESIZED_DISK_IMAGE_FILENAME }} \
            --install qemu-guest-agent \
            --run-command "systemctl enable qemu-guest-agent" \
            --selinux-relabel
        env:
          LIBGUESTFS_BACKEND: direct
          LIBGUESTFS_DEBUG: 1
          LIBGUESTFS_TRACE: 1
          LIBGUESTFS_DISABLE_APPLIANCE_LOCK: 1

      - name: Sparsify image
        shell: bash
        run: |
          SPARSE_OUTPUT="${{ env.RESIZED_DISK_IMAGE_FILENAME }}.sparse"
          virt-sparsify --compress ${{ env.RESIZED_DISK_IMAGE_FILENAME }} "$SPARSE_OUTPUT"
          mv -fv "$SPARSE_OUTPUT" ${{ env.RESIZED_DISK_IMAGE_FILENAME }}
        env:
          LIBGUESTFS_BACKEND: direct
          LIBGUESTFS_DEBUG: 1
          LIBGUESTFS_TRACE: 1

      - name: Upload disk image as artifact
        uses: actions/upload-artifact@v4
        with:
          name: ${{ env.IMAGE_NAME }}-${{ env.IMAGE_TAG }}
          path: ${{ env.RESIZED_DISK_IMAGE_FILENAME }}
          retention-days: 1
          compression-level: 9
          if-no-files-found: error
          overwrite: true

  package-and-push:
    name: Package and push ${{ github.event.inputs.cloud_image }} image
    runs-on: ubuntu-latest
    needs: build-disk-image

    permissions:
      contents: read
      packages: write

    steps:
      - name: Download disk image artifact
        uses: actions/download-artifact@v4
        with:
          name: ${{ needs.build-disk-image.outputs.name }}-${{ needs.build-disk-image.outputs.tag }}
          path: ./

      # https://github.com/kubevirt/kubevirt/blob/main/docs/container-register-disks.md
      - name: Create Dockerfile
        shell: bash
        run: |
          cat > Dockerfile << EOF
          FROM scratch
          ADD --chown=107:107 ${{ needs.build-disk-image.outputs.filename }} /disk/
          EOF
          cat Dockerfile

      - name: Setup Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Build and push
        uses: docker/build-push-action@v6
        with:
          context: .
          push: true
          tags: |
            ghcr.io/${{ github.repository_owner }}/${{ needs.build-disk-image.outputs.name }}:${{ needs.build-disk-image.outputs.tag }}
          provenance: false
